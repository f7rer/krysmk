import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥ –≥–æ–≤–Ω–∞
TOKEN = "7714851697:AAEt--N1Ow26PWvyFNLn5Ezgw9y1dmS1IQ8"
CHANNEL = "@krysmk"
MAIN_ADMIN = 8011529449
ADMINS = [6874908262]
GREETING = "–ô–æ—É, –ø–µ—Ç—É—à–∞—Ä–∞! –ö–∏–¥–∞–π —Å—é–¥–∞ —Å–≤–æ—é –ø–æ—Ö–∞–±—â–∏–Ω—É üê∑\n–†–∞–∑–º–µ—Å—Ç–∏–º, –µ—Å–ª–∏ –Ω–µ —Å–æ—Å—ë–º üíÖ"
FOOTER = "\n\n[–°–ª–∏—Ç—å —Å—É–∫—É](https://t.me/fadewithinbot)"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã
EDITING = 1

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤
posts_data = {}
pending_edits = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°–≤—è–∑—å", callback_data="contact")]]
    await update.message.reply_text(GREETING, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id in ADMINS:
        return
    
    post = {
        "user_id": user.id,
        "username": f"@{user.username}" if user.username else "–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞",
        "user_name": user.first_name or "–ê–Ω–æ–Ω–∏–º",
        "text": update.message.caption or "",
        "media": [],
        "date": datetime.now().strftime("%d.%m.%Y %H:%M"),
        "admin_msg_id": None  # –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    if update.message.photo:
        post["media"].append(("photo", update.message.photo[-1].file_id))
    elif update.message.video:
        post["media"].append(("video", update.message.video.file_id))

    post_id = str(update.message.message_id)
    posts_data[post_id] = post

    for admin in ADMINS:
        try:
            await send_to_admin(context, post, admin, post_id)
        except Exception as e:
            logging.error(f"–ê–¥–º–∏–Ω {admin} —Å–æ—Å—ë—Ç: {e}")

async def send_to_admin(context, post, admin_id, post_id):
    buttons = [
        [
            InlineKeyboardButton("üí© –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{post_id}"),
            InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"approve_{post_id}"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{post_id}"),
        ]
    ]

    caption = f"{post['text']}"
    if admin_id == MAIN_ADMIN:
        user_link = f"[{post['user_name']}](tg://user?id={post['user_id']})"
        caption += f"\n\nüë§ –û—Ç: {user_link} ({post['username']})\nüïí {post['date']}"

    try:
        if post["media"]:
            media_type, file_id = post["media"][0]
            if media_type == "photo":
                msg = await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=file_id,
                    caption=caption,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode="Markdown"
                )
            else:
                msg = await context.bot.send_video(
                    chat_id=admin_id,
                    video=file_id,
                    caption=caption,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode="Markdown"
                )
        else:
            msg = await context.bot.send_message(
                chat_id=admin_id,
                text=caption,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞
        posts_data[post_id]['admin_msg_id'] = msg.message_id
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–∞—Ç—å –∞–¥–º–∏–Ω—É: {e}")

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "contact":
        response = (
            "üñï–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∞–º–∏? –î–∞ —Ç—ã —à–∞—Ä–∏—à—å –∑–∞ –º–µ–º—ã! –ü–∏—à–µ—à—å —Å—é–¥–∞ ‚Äî –º—ã –ø–æ—Å—Ç–∏–º. –•–æ—á–µ—à—å –¥–∏–∞–ª–æ–≥? "
            "–ü–∏–¥–∞—Ä–∞—Å—É –∏–∑ –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä–∞ –∑–≤–æ–Ω–∏, —Ç—É—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–≤–∏–∂.\n\n"
            "üî• –ü—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è –º–æ–µ–π –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é? –°–ø–∞—Å–∏–±–æ, –ø–∞–ø–∞—à–∞, —Å–∞–º —Ä–∞–∑–±–µ—Ä—É—Å—å —Å —Ç–≤–æ–µ–π –∂–µ–Ω–æ–π. "
            "–£–≥—Ä–æ–∑—ã? –î–∞ –º—ã –∏—Ö —Å—Å–∞–Ω—ã–º–∏ —Ç—Ä—è–ø–∫–∞–º–∏ –≤—ã—Ç–∏—Ä–∞–µ–º ‚Äî —Å–º–µ—à–Ω–æ, –±–ª—è—Ç—å, —Å–ª—ã—à–∞—Ç—å —Å–æ–ø–ª–∏ –º–∞–ª–æ–ª–µ—Ç–∫–∏.\n\n"
            "üßë‚öñÔ∏è –ü–æ –∑–∞–∫–æ–Ω—É –≤—Å–µ —á–∏—Å—Ç–æ: 18+ –Ω–µ –ø–æ—Å—Ç–∏–º, –Ω–∞ –ø–æ–ª–∏—Ü–∏—é –Ω–∞–º –Ω–∞—Å—Ä–∞—Ç—å ‚Äî –æ–Ω–∏ —Å–∞–º–∏ –∑–Ω–∞—é—Ç, "
            "—á—Ç–æ —Ç—ã –¥–∞—É–Ω–∏—á–æ–∫, –µ—Å–ª–∏ –ø—Ä–∏–¥–µ—à—å —Å —Ç–∞–∫–∏–º–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è–º–∏.\n\n"
            "üí© –í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π: —Ö–æ—á–µ—à—å ‚Äî –≥–∞–¥—å, —Ö–æ—á–µ—à—å ‚Äî —Ö–≤–∞–ª–∏. –¢–æ–ª—å–∫–æ –ø–æ–º–Ω–∏: "
            "–≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ –≤—ã –≤—Å–µ –æ—Ä–∞–ª–∏ –∫–∞–∫ –≤—Å—ë –ø–ª–æ—Ö–æ, –∞ –∫–∞–∫ –Ω–∞–¥–æ –±—ã–ª–æ —Ö–æ—Ä–æ—à–µ–µ –ø–æ—Å—Ç–∏—Ç—å ‚Äî "
            "–ø—Ä–∏—à–ª–æ—Å—å –≤–∞–º –∂–æ–ø—É –ø–∏–Ω–∫–æ–º —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å. –¢–µ–ø–µ—Ä—å –¥—É–º–∞–π —Å–≤–æ–µ–π –±–∞—à–∫–æ–π, –º—É–¥–∏–ª–∞."
        )
        await query.edit_message_text(response, parse_mode="Markdown")
        return

    action, post_id = query.data.split('_')
    post = posts_data.get(post_id)

    if not post:
        await query.answer("–ü–æ—Å—Ç —É–∂–µ –≤ –∂–æ–ø–µ!")
        return

    if action == "delete":
        del posts_data[post_id]
        await query.message.delete()
        await query.answer("–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω –Ω–∞—Ö—É–π!")
    
    elif action == "approve":
        await send_to_channel(context, post)
        del posts_data[post_id]
        await query.message.delete()
        await query.answer("–ó–∞–ª–∏–ª –≤ –∫–∞–Ω–∞–ª, –¥–æ–≤–æ–ª–µ–Ω?")
    
    elif action == "edit":
        pending_edits[query.from_user.id] = post_id
        await query.message.reply_text("–®–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –ø–∏–¥—Ä–∏–ª–∞:")
        return EDITING

async def send_to_channel(context, post):
    caption = f"{post['text']}{FOOTER}"
    try:
        if post["media"]:
            media_type, file_id = post["media"][0]
            if media_type == "photo":
                await context.bot.send_photo(
                    chat_id=CHANNEL,
                    photo=file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            else:
                await context.bot.send_video(
                    chat_id=CHANNEL,
                    video=file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
        else:
            await context.bot.send_message(
                chat_id=CHANNEL,
                text=caption,
                parse_mode="Markdown"
            )
    except Exception as e:
        logging.error(f"–ù–µ –ø—Ä–æ–∫–∞—Ç–∏–ª–æ –≤ –∫–∞–Ω–∞–ª: {e}")

async def edit_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in pending_edits:
        return
    
    post_id = pending_edits[user_id]
    post = posts_data.get(post_id)
    post['text'] = update.message.text
    del pending_edits[user_id]
    
    for admin in ADMINS:
        try:
            await update_admin_post(context, post, admin, post_id)
        except Exception as e:
            logging.error(f"–ê–¥–º–∏–Ω {admin} –æ–±–æ—Å—Ä–∞–ª—Å—è: {e}")
    
    await update.message.reply_text("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, –µ–±–∞—Ç—å!")
    return ConversationHandler.END

async def update_admin_post(context, post, admin_id, post_id):
    buttons = [
        [
            InlineKeyboardButton("üí© –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{post_id}"),
            InlineKeyboardButton("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"approve_{post_id}"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{post_id}"),
        ]
    ]

    caption = f"{post['text']}"
    if admin_id == MAIN_ADMIN:
        user_link = f"[{post['user_name']}](tg://user?id={post['user_id']})"
        caption += f"\n\nüë§ –û—Ç: {user_link} ({post['username']})\nüïí {post['date']}"

    try:
        if post["media"]:
            media_type, file_id = post["media"][0]
            if media_type == "photo":
                await context.bot.edit_message_caption(
                    chat_id=admin_id,
                    message_id=post['admin_msg_id'],
                    caption=caption,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode="Markdown"
                )
            else:
                await context.bot.edit_message_caption(
                    chat_id=admin_id,
                    message_id=post['admin_msg_id'],
                    caption=caption,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode="Markdown"
                )
        else:
            await context.bot.edit_message_text(
                chat_id=admin_id,
                message_id=post['admin_msg_id'],
                text=caption,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )
    except Exception as e:
        logging.error(f"–ù–µ —Å–º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å: {e}")

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_click)],
        states={
            EDITING: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_post)]
        },
        fallbacks=[],
        per_message=True  # –§–∏–∫—Å –¥–ª—è –µ–±—É—á–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.TEXT, handle_media))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_click))

    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        poll_interval=2,  # –ù–∞ –≤—Å—è–∫–∏–π –ø–æ–∂–∞—Ä–Ω—ã–π
        timeout=30
    )

if __name__ == "__main__":
    main()
